import React, { useState, useEffect } from "react";
import {
  View,
  StyleSheet,
  Dimensions,
  Text,
  TouchableOpacity,
  Alert,
  ScrollView,
} from "react-native";
import { Calendar } from "react-native-calendars";
import DateTimePickerModal from "react-native-modal-datetime-picker";
import WeekView from "react-native-week-view";
import GeneralButton from "../../../components/button/generalButton";
import useAvailableSlots from "../../../hooks/useAvailableSlots";
import useBookSeat from "../../../hooks/useBookSeat";
import useBranchStore from "../../../store/branchStore";
import * as SecureStore from "expo-secure-store";

const { width } = Dimensions.get("window");

const MIN_DURATION = 30; // ƒê·∫∑t t·ªëi thi·ªÉu 30 ph√∫t
const OPENING_HOUR = 6;
const CLOSING_HOUR = 22;

export default SeatBookingDetail = function ({ route, navigation }) {
  const { roomId } = route.params;
  const { branchId } = useBranchStore();

  const [isPickerVisible, setPickerVisible] = useState(false);
  const [currentDate, setCurrentDate] = useState(new Date());
  const [startTime, setStartTime] = useState(null);
  const [endTime, setEndTime] = useState(null);
  const [isSelectingStart, setIsSelectingStart] = useState(true);
  const [showCalendar, setShowCalendar] = useState(false);

  const formattedDate = currentDate.toLocaleDateString("en-CA"); //TODO Chuy·ªÉn ƒë·ªïi ng√†y th√†nh format "YYYY-MM-DD"

  //* G·ªçi API l·∫•y danh s√°ch slot tr·ªëng
  const { data: availableSlots } = useAvailableSlots({
    roomId: Number(roomId), // ƒê·∫£m b·∫£o roomId l√† s·ªë nguy√™n
    date: formattedDate,
  });
  console.log("üìÖ Date sent to API:", formattedDate, "roomId:", roomId);

  const bookSeatMutation = useBookSeat();

  //* L√†m tr√≤n th·ªùi gian v·ªÅ b·ªôi s·ªë 30 ph√∫t
  const adjustToNearest30Minutes = (time, roundUp = false) => {
    const newTime = new Date(time);
    const minutes = newTime.getMinutes();
    const adjustedMinutes = roundUp
      ? Math.ceil(minutes / MIN_DURATION) * MIN_DURATION
      : minutes;
    newTime.setMinutes(adjustedMinutes);
    newTime.setSeconds(0);
    return newTime;
  };

  const today = new Date();
  const todayString = today.toISOString().split("T")[0];

  const handleDateSelect = (day) => {
    // C·∫≠p nh·∫≠t ng√†y ng∆∞·ªùi d√πng ch·ªçn t·ª´ l·ªãch
    setCurrentDate(new Date(day.dateString));
  };

  const adjustToNearestInterval = (time, interval) => {
    const newTime = new Date(time);
    const minutes = newTime.getMinutes();
    const adjustedMinutes = Math.floor(minutes / interval) * interval;
    newTime.setMinutes(adjustedMinutes);
    newTime.setSeconds(0);
    newTime.setMilliseconds(0);
    return newTime;
  };

  //* X·ª≠ l√Ω ch·ªçn gi·ªù
  const handleConfirmTime = (time) => {
    // L·∫•y ng√†y ng∆∞·ªùi d√πng ch·ªçn t·ª´ l·ªãch, kh√¥ng ph·∫£i ng√†y hi·ªán t·∫°i
    const selectedDate = currentDate; // ƒê√¢y l√† ng√†y ng∆∞·ªùi d√πng ch·ªçn t·ª´ l·ªãch

    // Ki·ªÉm tra n·∫øu th·ªùi gian b·∫Øt ƒë·∫ßu kh√¥ng n·∫±m trong kho·∫£ng 6:00 AM v√† 10:00 PM
    if (time.getHours() < OPENING_HOUR || time.getHours() >= CLOSING_HOUR) {
      Alert.alert(
        "L·ªói",
        "Gi·ªù b·∫Øt ƒë·∫ßu ph·∫£i n·∫±m trong khung t·ª´ 06:00 ƒë·∫øn 22:00."
      );
      return;
    }

    // K·∫øt h·ª£p ng√†y ng∆∞·ªùi d√πng ch·ªçn v·ªõi gi·ªù ƒë√£ ch·ªçn
    const adjustedStartTime = new Date(selectedDate);
    adjustedStartTime.setHours(time.getHours()); // Set gi·ªù ng∆∞·ªùi d√πng ch·ªçn
    adjustedStartTime.setMinutes(time.getMinutes()); // Set ph√∫t ng∆∞·ªùi d√πng ch·ªçn
    adjustedStartTime.setSeconds(0); // L√†m tr√≤n gi√¢y v·ªÅ 0
    adjustedStartTime.setMilliseconds(0); // L√†m tr√≤n nano gi√¢y v·ªÅ 0

    if (isSelectingStart) {
      setStartTime(adjustedStartTime);
      setEndTime(null); // Reset endTime
    } else {
      if (!startTime) {
        Alert.alert("L·ªói", "Vui l√≤ng ch·ªçn gi·ªù b·∫Øt ƒë·∫ßu tr∆∞·ªõc.");
        return;
      }

      // Ki·ªÉm tra th·ªùi gian k·∫øt th√∫c kh√¥ng ƒë∆∞·ª£c nh·ªè h∆°n th·ªùi gian b·∫Øt ƒë·∫ßu v√† ph·∫£i l√† b·ªôi s·ªë 30 ph√∫t
      const minEndTime = new Date(startTime);
      minEndTime.setMinutes(minEndTime.getMinutes() + MIN_DURATION); // Ph·∫£i c√°ch startTime √≠t nh·∫•t 30 ph√∫t

      if (adjustedStartTime < minEndTime) {
        Alert.alert(
          "L·ªói",
          `Th·ªùi gian k·∫øt th√∫c ph·∫£i c√°ch th·ªùi gian b·∫Øt ƒë·∫ßu √≠t nh·∫•t ${MIN_DURATION} ph√∫t.`
        );
        return;
      }

      // L√†m tr√≤n th·ªùi gian k·∫øt th√∫c theo b·ªôi s·ªë 30 ph√∫t
      const adjustedEndTime = adjustToNext30Minutes(adjustedStartTime);
      setEndTime(adjustedEndTime);
    }

    setPickerVisible(false);
  };

  const toggleCalendar = () => {
    setShowCalendar(!showCalendar);
  };

  // const confirmBooking = () => {
  //   if (!startTime || !endTime) {
  //     Alert.alert(
  //       "L·ªói",
  //       "Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß ng√†y, gi·ªù b·∫Øt ƒë·∫ßu v√† gi·ªù k·∫øt th√∫c."
  //     );
  //     return;
  //   }

  //   const newEvent = {
  //     id: eventList.length + 1,
  //     description: "L·ªãch c·ªßa b·∫°n",
  //     startDate: startTime,
  //     endDate: endTime,
  //     color: "#4CAF50",
  //     userId: currentUserId,
  //   };

  //   Alert.alert(
  //     "X√°c nh·∫≠n ƒë·∫∑t ch·ªó",
  //     `B·∫°n c√≥ mu·ªën ƒë·∫∑t ch·ªó t·ª´ ${startTime.toLocaleTimeString([], {
  //       hour: "2-digit",
  //       minute: "2-digit",
  //       hour12: false,
  //     })} ƒë·∫øn ${endTime.toLocaleTimeString([], {
  //       hour: "2-digit",
  //       minute: "2-digit",
  //       hour12: false,
  //     })} v√†o ng√†y ${currentDate.toDateString()} kh√¥ng?`,
  //     [
  //       {
  //         text: "H·ªßy",
  //         style: "cancel",
  //       },
  //       {
  //         text: "ƒê·ªìng √Ω",
  //         onPress: () => {
  //           setEventList((prevEvents) => [...prevEvents, newEvent]);
  //           setStartTime(null);
  //           setEndTime(null);
  //           Alert.alert("ƒê·∫∑t ch·ªó th√†nh c√¥ng!");
  //         },
  //       },
  //     ]
  //   );
  // };

  const formatTimeToHHMMSS = (date) => {
    return date.toTimeString().split(" ")[0]; // L·∫•y "HH:mm:ss"
  };

  const adjustToNext30Minutes = (time) => {
    const newTime = new Date(time);
    const minutes = newTime.getMinutes();
    const roundedMinutes = Math.ceil(minutes / MIN_DURATION) * MIN_DURATION; // L√†m tr√≤n l√™n theo b·ªôi s·ªë 30 ph√∫t
    newTime.setMinutes(roundedMinutes);
    newTime.setSeconds(0); // L√†m tr√≤n gi√¢y v·ªÅ 0
    newTime.setMilliseconds(0); // L√†m tr√≤n nano v·ªÅ 0
    return newTime;
  };

  //* Ki·ªÉm tra slot tr·ªëng tr∆∞·ªõc khi ƒë·∫∑t
  const checkAvailability = () => {
    if (!startTime || !endTime) {
      Alert.alert("L·ªói", "Vui l√≤ng ch·ªçn th·ªùi gian.");
      return;
    }

    // Chuy·ªÉn startTime v√† endTime c·ªßa ng∆∞·ªùi d√πng th√†nh timestamp (mili gi√¢y)
    const selectedStart = startTime.getTime(); // timestamp c·ªßa startTime ng∆∞·ªùi d√πng ch·ªçn
    const selectedEnd = endTime.getTime(); // timestamp c·ªßa endTime ng∆∞·ªùi d√πng ch·ªçn

    console.log("üîç Ki·ªÉm tra slot v·ªõi:", { selectedStart, selectedEnd });

    const bookingDate = availableSlots?.bookingDate;

    const isSlotAvailable = availableSlots?.availableSlots?.some((slot) => {
      // T√°ch gi·ªù, ph√∫t, gi√¢y t·ª´ chu·ªói startTime v√† endTime
      const [startHour, startMinute, startSecond] = slot.startTime.split(":");
      const [endHour, endMinute, endSecond] = slot.endTime.split(":");

      // K·∫øt h·ª£p ng√†y t·ª´ bookingDate v√† gi·ªù t·ª´ startTime, endTime ƒë·ªÉ t·∫°o chu·ªói ng√†y gi·ªù ƒë·∫ßy ƒë·ªß cho slotStart v√† slotEnd
      const slotStartStr = `${bookingDate}T${String(startHour).padStart(
        2,
        "0"
      )}:${String(startMinute).padStart(2, "0")}:${String(startSecond).padStart(
        2,
        "0"
      )}`;
      const slotEndStr = `${bookingDate}T${String(endHour).padStart(
        2,
        "0"
      )}:${String(endMinute).padStart(2, "0")}:${String(endSecond).padStart(
        2,
        "0"
      )}`;

      // T·∫°o Date object t·ª´ chu·ªói slotStartStr v√† slotEndStr ƒë·ªÉ chuy·ªÉn th√†nh timestamp (mili gi√¢y)
      const slotStart = new Date(slotStartStr).getTime();
      const slotEnd = new Date(slotEndStr).getTime();

      console.log("startTime:", slot.startTime, "endTime:", slot.endTime);
      console.log(
        "Start Hour:",
        startHour,
        "Start Minute:",
        startMinute,
        "Start Second:",
        startSecond
      );

      console.log(
        "Slot Start String:",
        slotStartStr,
        "Slot End String:",
        slotEndStr
      );
      console.log("Slot Start:", slotStart, "Slot End:", slotEnd);

      console.log(
        "Slot Start String:",
        slotStartStr,
        "Slot End String:",
        slotEndStr
      );
      console.log("Slot Start:", slotStart, "Slot End:", slotEnd);

      // Ki·ªÉm tra n·∫øu th·ªùi gian ƒë√£ ch·ªçn n·∫±m trong kho·∫£ng th·ªùi gian c√≥ s·∫µn
      return (
        slot.status === "Valid" &&
        selectedStart >= slotStart &&
        selectedEnd <= slotEnd
      );
    });

    console.log("üéØ Available Slots:", availableSlots);

    if (!isSlotAvailable) {
      Alert.alert(
        "L·ªói",
        "Th·ªùi gian n√†y ƒë√£ c√≥ ng∆∞·ªùi ƒë·∫∑t ho·∫∑c kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn th·ªùi gian kh√°c."
      );
      return;
    }

    confirmBooking(); // N·∫øu c√≥ slot h·ª£p l·ªá, th·ª±c hi·ªán ƒë·∫∑t ch·ªó
  };

  //* X√°c nh·∫≠n ƒë·∫∑t ch·ªó
  const confirmBooking = async () => {
    const accessToken = await SecureStore.getItemAsync("accessToken");

    if (!accessToken) {
      Alert.alert("L·ªói", "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p.");
      return;
    }

    if (!startTime || !endTime) {
      Alert.alert("L·ªói", "Vui l√≤ng ch·ªçn th·ªùi gian.");
      return;
    }

    // Chuy·ªÉn startTime th√†nh chu·ªói "HH:mm"
    const startHour = startTime.getHours();
    const startMinute = startTime.getMinutes();
    const startTimeFormatted = `${String(startHour).padStart(2, "0")}:${String(
      startMinute
    ).padStart(2, "0")}`;

    // Duration calculation: Convert milliseconds to minutes
    const durationInMinutes =
      (endTime.getTime() - startTime.getTime()) / 1000 / 60;

    const bookingData = {
      bookingDate: formattedDate, // YYYY-MM-DD
      startTime: startTimeFormatted, // G·ª≠i startTime d∆∞·ªõi d·∫°ng "HH:mm"
      duration: durationInMinutes,
    };

    console.log("G·ª≠i y√™u c·∫ßu ƒë·∫∑t ch·ªó v·ªõi:", bookingData, accessToken);

    bookSeatMutation.mutate(
      {
        roomId: roomId,
        bookingData,
      },
      {
        onSuccess: (response) => {
          console.log("API Response booking id:", response.data.id);
          const bookingId = response.data.id;
          navigation.navigate("X√°c nh·∫≠n ƒë·∫∑t ch·ªó", { bookingId });
          Alert.alert("ƒê·∫∑t ch·ªó th√†nh c√¥ng!");
        },
        onError: (error) => {
          if (error.response?.data?.message) {
            // N·∫øu API tr·∫£ v·ªÅ th√¥ng b√°o v·ªÅ vi·ªác kh√¥ng th·ªÉ ƒë·∫∑t nhi·ªÅu h∆°n 1 slot
            Alert.alert("Th√¥ng b√°o", error.response.data.message);
          } else {
            // N·∫øu c√≥ l·ªói kh√°c
            Alert.alert(
              "L·ªói",
              "Kh√¥ng th·ªÉ th·ª±c hi·ªán y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i."
            );
          }
        },
      }
    );
  };

  // const coloredEvents = eventList.map((event) => ({
  //   ...event,
  //   color: event.userId === currentUserId ? "#4CAF50" : "#D3D3D3",
  // }));

  const handleConfirmPress = () => {
    navigation.navigate("X√°c nh·∫≠n ƒë·∫∑t ch·ªó");
  };

  const parseTime = (date, time) => {
    if (!date || !time) return null;
    const parsedDate = new Date(`${date}T${time}`);
    return isNaN(parsedDate) ? null : parsedDate;
  };

  return (
    <ScrollView contentContainerStyle={styles.container}>
      {/* Toggle L·ªãch */}
      <TouchableOpacity style={styles.selectBox} onPress={toggleCalendar}>
        <Text style={styles.selectText}>
          {showCalendar ? "·∫®n l·ªãch" : "Ch·ªçn ng√†y v√† gi·ªù"}
        </Text>
        <Text style={styles.detailsText}>
          {`Ng√†y: ${currentDate.toDateString()}`}
        </Text>
        <Text style={styles.detailsText}>
          {`Gi·ªù b·∫Øt ƒë·∫ßu: ${
            startTime
              ? startTime.toLocaleTimeString([], {
                  hour: "2-digit",
                  minute: "2-digit",
                  hour12: false,
                })
              : "Ch∆∞a ch·ªçn"
          }`}
        </Text>
        <Text style={styles.detailsText}>
          {`Gi·ªù k·∫øt th√∫c: ${
            endTime
              ? endTime.toLocaleTimeString([], {
                  hour: "2-digit",
                  minute: "2-digit",
                  hour12: false,
                })
              : "Ch∆∞a ch·ªçn"
          }`}
        </Text>
      </TouchableOpacity>

      {/* Hi·ªÉn th·ªã L·ªãch khi b·∫≠t */}
      {showCalendar && (
        <>
          <Calendar
            onDayPress={handleDateSelect}
            markedDates={{
              [currentDate.toISOString().split("T")[0]]: {
                selected: true,
                marked: true,
                selectedColor: "blue",
              },
            }}
            minDate={todayString}
          />
          <View style={styles.timePickerContainer}>
            <TouchableOpacity
              style={styles.timePickerButton}
              onPress={() => {
                setIsSelectingStart(true);
                setPickerVisible(true);
              }}
            >
              <Text style={styles.timePickerText}>Ch·ªçn gi·ªù b·∫Øt ƒë·∫ßu</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.timePickerButton}
              onPress={() => {
                setIsSelectingStart(false);
                setPickerVisible(true);
              }}
              disabled={!startTime}
            >
              <Text style={styles.timePickerText}>Ch·ªçn gi·ªù k·∫øt th√∫c</Text>
            </TouchableOpacity>
          </View>
          <GeneralButton
            text="Ki·ªÉm tra & ƒê·∫∑t ch·ªó"
            onPress={checkAvailability}
          />
        </>
      )}

      {/* Hi·ªÉn th·ªã l·ªãch c√°c slot ƒë√£ ƒë·∫∑t tr∆∞·ªõc */}
      <View style={styles.weekViewContainer}>
        <Text style={styles.subHeader}>L·ªãch ƒë·∫∑t ch·ªó</Text>
        <WeekView
          events={
            availableSlots?.availableSlots
              ?.map((slot) => {
                const startDate = new Date(
                  `${formattedDate}T${slot.startTime}`
                );
                const endDate = new Date(`${formattedDate}T${slot.endTime}`);

                return {
                  id: slot.id || Math.random().toString(),
                  description: slot.status === "Valid" ? "Kh·∫£ d·ª•ng" : "ƒê√£ ƒë·∫∑t",
                  startDate,
                  endDate,
                  color: slot.status === "Valid" ? "#4CAF50" : "#D32F2F", // Xanh l√° c√¢y n·∫øu c√≤n tr·ªëng, ƒë·ªè n·∫øu ƒë√£ ƒë·∫∑t
                };
              })
              .filter(Boolean) || []
          }
          selectedDate={currentDate}
          numberOfDays={4}
          hoursInDisplay={14}
          timeStep={30}
          formatDateHeader="ddd"
          startHour={8}
          endHour={22}
          onEventPress={(event) =>
            Alert.alert(
              "Th√¥ng b√°o",
              event.description === "Kh·∫£ d·ª•ng"
                ? "Khung gi·ªù n√†y c√≤n tr·ªëng."
                : "Khung gi·ªù n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t."
            )
          }
        />
      </View>

      <DateTimePickerModal
        isVisible={isPickerVisible}
        mode="time"
        onConfirm={handleConfirmTime}
        onCancel={() => setPickerVisible(false)}
      />

      {/* Th√¥ng tin chi ti·∫øt */}
      <View style={styles.footerContainer}>
        <View style={styles.footerContent}>
          <View style={styles.footerInfo}>
            <Text style={styles.capacityText}>S·ªë l∆∞·ª£ng t·ªëi ƒëa:</Text>
            <Text style={styles.capacityText}>10</Text>
          </View>
          <View style={styles.footerInfo}>
            <Text style={styles.priceText}>Gi√°:</Text>
            <Text style={styles.priceText}>55.000 ƒë/gi·ªù</Text>
          </View>
        </View>
        <GeneralButton
          text="Ki·ªÉm tra th√¥ng tin v√† x√°c nh·∫≠n"
          style={styles.footerButton}
          onPress={handleConfirmPress}
        />
        <Text style={styles.noteText}>
          Ph√≠ ƒë·∫∑t ch·ªó ng·ªìi s·∫Ω ƒë∆∞·ª£c ho√†n tr·∫£ 100% n·∫øu h·ªßy ƒë·∫∑t ch·ªó tr∆∞·ªõc 24 gi·ªù.
        </Text>
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 16,
    backgroundColor: "#F9F9F9",
  },
  selectBox: {
    backgroundColor: "#EFEFEF",
    padding: 16,
    borderRadius: 8,
    marginBottom: 16,
  },
  selectText: {
    fontSize: 18,
    fontWeight: "bold",
  },
  detailsText: {
    fontSize: 16,
    marginTop: 8,
  },
  timePickerContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginVertical: 16,
  },
  timePickerButton: {
    backgroundColor: "#007BFF",
    padding: 12,
    borderRadius: 8,
  },
  timePickerText: {
    color: "white",
    fontWeight: "bold",
  },
  confirmButton: {
    backgroundColor: "#4CAF50",
    padding: 16,
    borderRadius: 8,
    alignItems: "center",
    marginTop: 16,
  },
  confirmText: {
    color: "white",
    fontSize: 18,
    fontWeight: "bold",
  },
  weekViewContainer: {
    height: 400,
    marginTop: 16,
    marginBottom: 16,
  },
  footerContainer: {
    paddingHorizontal: 0,
    marginHorizontal: -16,
    backgroundColor: "#FFFFFF",
  },
  footerContent: {
    flexDirection: "row",
  },
  footerInfo: {
    flex: 0.5,
    alignItems: "center",
    justifyContent: "center",
    marginVertical: 12,
  },
  footerButton: {
    marginBottom: 12,
  },
  noteText: {
    fontSize: 14,
    color: "#A8A8A8",
    marginHorizontal: 20,
    marginBottom: 12,
  },
});
